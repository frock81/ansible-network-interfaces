# tasks file for network-interfaces
---
- name: create directory
  file:
    path: "{{ network_interfaces_interface_path }}"
    state: directory
  when: network_interfaces_interfaces | length > 0
  tags:
    - configuration
    - network-interfaces
    - network-interfaces-create-directory

- name: all interfaces
  template:
    src: etc/network/interfaces.j2
    dest: "{{ network_interfaces_all_interfaces_path }}"
  when: network_interfaces_interfaces | length > 0
  register: result
  tags:
    - configuration
    - network-interfaces
    - network-interfaces-all-interfaces

- set_fact:
    reboot: True
  when: result.changed

- name: list network interfaces
  command: find {{ network_interfaces_interface_path }} -type f
  changed_when: false
  when: network_interfaces_interfaces | length > 0
  register: _network_interfaces_existing_files
  tags:
    - configuration
    - network-interfaces
    - network-interfaces-list-network-interfaces

- name: configurations
  template:
    src: etc/network/interfaces.d/device.j2
    dest: "{{ network_interfaces_interface_path }}/device-{{ item.device }}-{{ item.family | default('inet') }}"
  with_items: "{{ network_interfaces_interfaces }}"
  register: _network_interfaces_configuration_result
  tags:
    - configuration
    - network-interfaces
    - network-interfaces-configurations

- name: configured files
  set_fact:
    network_interfaces_configured_files: >
      [{% for item in _network_interfaces_configuration_result.results | default([]) -%}
      {{ item.dest | default(item.path) | string }}{{ '' if loop.last else ',' }}
      {%- endfor %}]
  tags:
    - configuration
    - network-interfaces
    - network-interfaces-configured-files

- name: remove configurations
  file:
    path: "{{ item }}"
    state: absent
  when: network_interfaces_manage_devices and (item not in network_interfaces_configured_files)
  with_items: "{{ _network_interfaces_existing_files.stdout_lines | default([]) }}"
  tags:
    - configuration
    - network-interfaces
    - network-interfaces-remove-configurations

- set_fact:
    reboot: True
  when: item.changed and item.item.auto | default(true)
  with_items: "{{ _network_interfaces_configuration_result.results | default([]) }}"

- name: reboot
  command: shutdown -r +1
  async: 0
  poll: 0
  when: reboot is defined and reboot == True
  tags:
    - configuration
    - network-interfaces
    - network-interfaces-restart-devices
  ignore_errors: yes

- name: aguardar shutdown
  wait_for:
    port: 22
    host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
    state: stopped
  connection: local

- name: aguardar reinicialização
  wait_for:
    port: 22
    host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
    search_regex: OpenSSH
    delay: 10
    sleep: 5
  connection: local
